<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coders on Auh</title><link>https://yesyouget.art/coder/</link><description>Recent content in Coders on Auh</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 28 Feb 2022 14:50:46 +0800</lastBuildDate><atom:link href="https://yesyouget.art/coder/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://yesyouget.art/coder/thinking/%E5%90%8C%E6%AD%A5%E5%92%8C%E8%99%9A%E6%8B%9F%E5%8C%96/</link><pubDate>Mon, 28 Feb 2022 14:50:46 +0800</pubDate><guid>https://yesyouget.art/coder/thinking/%E5%90%8C%E6%AD%A5%E5%92%8C%E8%99%9A%E6%8B%9F%E5%8C%96/</guid><description>从构建到同步再到虚拟化，构建自由的世界 坚果云：对无状态文件的同步 github：所有文件会绑定，git仓库，中存在和机器绑定的状态信息。这些是不能同步的。 我们可以使用坚果云，实现，无状态同步。来操作自己的无状态文件。 还可以仅仅保留，git clone 文字。来说明，自己这块的同步，来自另外一个服务器。指出这种有状态，必须这种方式。才可以。 除了同步之</description></item><item><title/><link>https://yesyouget.art/coder/thinking/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E8%AE%BE%E8%AE%A1/</link><pubDate>Mon, 28 Feb 2022 14:29:48 +0800</pubDate><guid>https://yesyouget.art/coder/thinking/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E8%AE%BE%E8%AE%A1/</guid><description>如何做好设计 需求来自发现和感悟，来自需要。 设计师要做的是： 从需求出发 分析整个层次需求和功能的具体部分，以及扩展性。 从顶层到下层的循环，直到，落实到最基础最底层。 从需求出发的最顶层设计。而简单的设计，是仅仅满足最基本的功能。而最佳的设计，缺失将设计容纳这个需求。而不是等价。这是在做未来的事情。 而过度设计，是设计了未来也许根本不需要的东西</description></item><item><title/><link>https://yesyouget.art/coder/thinking/%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A%E7%9A%84%E7%90%86%E8%A7%A3/</link><pubDate>Mon, 17 Jan 2022 09:44:12 +0800</pubDate><guid>https://yesyouget.art/coder/thinking/%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A%E7%9A%84%E7%90%86%E8%A7%A3/</guid><description>代码注释的理解 代码注释主要服务于可读性问题。 但是，可读性问题，不仅仅是依赖代码注释。所以，可读性达标的情况下。代码注释是没有必要的。 那么可读性，主要取决什么？ 可读性，是用来读的，所以，读的对象是非常重要的。 方法的可读性维护， 面向方法调用者，调用者不应该过分关注内部细节。也就是说，此时需要方法可读符合，黑盒思想。 语法提供的方法命名，参数</description></item><item><title/><link>https://yesyouget.art/coder/thinking/%E7%9C%8B%E6%87%82%E8%AE%BE%E8%AE%A1/</link><pubDate>Tue, 23 Feb 2021 14:03:49 +0800</pubDate><guid>https://yesyouget.art/coder/thinking/%E7%9C%8B%E6%87%82%E8%AE%BE%E8%AE%A1/</guid><description>自己太菜了，求问，如何看懂有非常多继承的代码？ https://www.v2ex.com/t/755284 这个东西，其实有点跨越。懵逼的原因，有些东西可能不清晰。能力范围之外且相对庞大的东西，往往导致自己无从下手。因为这确实是一个大问题。夸张的比喻，就是直接问，如何看懂火箭设计图。 这个问题，要拆解一下。 我自己的理解拆解部分。 理解类的结构。 至少理解，构造器里面该写啥，不该写啥，应该写啥。（实际</description></item><item><title/><link>https://yesyouget.art/coder/thinking/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E4%B8%80%E9%97%A8%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link><pubDate>Fri, 05 Feb 2021 16:53:52 +0800</pubDate><guid>https://yesyouget.art/coder/thinking/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E4%B8%80%E9%97%A8%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</guid><description>如何快速学习一门编程语言-10步上天 基于对一门的语言的全面学习，举一反三。类比思维。很快的就可以上手另外一门新的语言。 比如，本人java是主要语言。之后，上手python，go，语言都非常的迅速。 对于一般的相对体系单一不是庞大的语言，从不会到学会，估计1-2天时间，最多一个星期就可以精通。像js，在这套系统下，也是可以用的，但是，学起</description></item><item><title/><link>https://yesyouget.art/coder/thinking/%E7%9F%A5%E8%AF%86%E5%88%86%E7%B1%BB%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</link><pubDate>Tue, 19 Jan 2021 03:11:37 +0800</pubDate><guid>https://yesyouget.art/coder/thinking/%E7%9F%A5%E8%AF%86%E5%88%86%E7%B1%BB%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</guid><description>我说几个词。 势、道、法、术、器。 作为程序员，我理解这几个字，在整理我的工作之后。 我发现我大部分时间在搞工具类的事情。所谓的器。 实际上，作为真正的编码的人员，对语言本身的并没有特别深入踏实研究，所以不算精通。已存的知识性的东西。称谓 法 当，我接触越来越多的语言之后。我才通过语法对比，发现一些 编程的思想。比如面向对象，如何封装，如何抽象；比</description></item><item><title/><link>https://yesyouget.art/coder/thinking/%E5%90%84%E7%A7%8D%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E6%80%9D%E8%80%83/</link><pubDate>Tue, 12 Jan 2021 09:13:12 +0800</pubDate><guid>https://yesyouget.art/coder/thinking/%E5%90%84%E7%A7%8D%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E6%80%9D%E8%80%83/</guid><description>小飞: 每种语言都说自己有多优秀，但是都没有成为主流，或者万能的语言 小樊: 最高效的执行效率，肯定是直接写二进制 小樊: 但是，写二进制显然不是最快的编写效率 小樊: 所有的语言，都在追求，一种最快的编写办法。以及执行效率 小樊: 编写快速，肯定是，过程代码执行，对象化，编写过程类话，类复用，继承，多态化。 小樊: 而类的编写，各家语言又各显神通。各种定</description></item><item><title/><link>https://yesyouget.art/coder/thinking/%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%92%8C%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E6%80%9D%E8%80%83/</link><pubDate>Sun, 10 Jan 2021 03:35:46 +0800</pubDate><guid>https://yesyouget.art/coder/thinking/%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%92%8C%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E6%80%9D%E8%80%83/</guid><description>开发现象。（普通程序员非运维） 编程依赖于图形化界面。 编译，打包，部署，也是依赖图形化工具。 有些人认为，图形化很方便呀。直接用就好。 有些人认为，命令行方便。 分析： 图形化的过度封装。使得一些细节问题被隐藏和不被发现。 导致了，一个程序员只能写代码。却不能让代码真正的跑起来。 本地，通过命令行都未必运行不起来 对于先进的软件工程思想。ci，cd，</description></item><item><title/><link>https://yesyouget.art/coder/thinking/%E6%88%91%E4%BB%AC%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%BF%87%E7%A8%8B%E4%BC%9A%E9%81%87%E5%88%B0%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98%E7%BE%A4%E5%8F%8B%E6%8E%A2%E8%AE%A8/</link><pubDate>Sat, 09 Jan 2021 18:43:00 +0800</pubDate><guid>https://yesyouget.art/coder/thinking/%E6%88%91%E4%BB%AC%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%BF%87%E7%A8%8B%E4%BC%9A%E9%81%87%E5%88%B0%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98%E7%BE%A4%E5%8F%8B%E6%8E%A2%E8%AE%A8/</guid><description>小飞: 前几天面试被虐了之后，学习动力很足，这几天感觉又不行了，集中不了注意力 小飞: 有没有什么办法啊 小伟: 再被虐一次 小樊: 空学理论很容易这样 小樊: 搞点实际的东西。融合进去。就有兴趣了 小樊: 不过，可以肯定一点是。你这个发现这个问题，虽然算不上啥具体问题。但是属于心情上的问题。这个问题其实非常重要 小樊: 善于发现自己的类似这种心理上的问题。 小</description></item><item><title/><link>https://yesyouget.art/coder/thinking/%E4%BA%AC%E4%B8%9C%E6%8A%A2%E8%B4%AD%E4%BB%A3%E7%A0%81%E5%90%84%E7%A7%8D%E7%82%AB%E6%8A%80%E7%9A%84%E6%80%9D%E8%80%83/</link><pubDate>Sat, 09 Jan 2021 05:44:30 +0800</pubDate><guid>https://yesyouget.art/coder/thinking/%E4%BA%AC%E4%B8%9C%E6%8A%A2%E8%B4%AD%E4%BB%A3%E7%A0%81%E5%90%84%E7%A7%8D%E7%82%AB%E6%8A%80%E7%9A%84%E6%80%9D%E8%80%83/</guid><description>不得不说，github上面又一轮新的霸榜项目出现了。京东抢购的代码。可能目的都是抢茅台，利润丰厚吧。 自己也参与了一些版本。也研究过别人写的版本。参与过其中，自己琢磨过，也看过别人写的。 总结一下github上面，抢茅台各个版本 语言 js，python，go，shell的。全部有。 类型 直接搞协议的，浏览器插件的，chromedriver版本</description></item><item><title/><link>https://yesyouget.art/coder/codeDesin/java%E8%AE%BE%E8%AE%A1%E4%B8%89--%E9%9D%A2%E5%90%91%E5%B0%81%E8%A3%85/</link><pubDate>Sun, 27 Dec 2020 19:55:10 +0800</pubDate><guid>https://yesyouget.art/coder/codeDesin/java%E8%AE%BE%E8%AE%A1%E4%B8%89--%E9%9D%A2%E5%90%91%E5%B0%81%E8%A3%85/</guid><description>可继承，可扩展，如何高效编写类来生产对象 这里说的封装的概念。更多指的是自己的功能模块的封装。 事情是因为，自己编写的一个代理测试类。 基本需求，有一个巨大的存着很多代理服务器的文件。对这些服务器进行延迟测试，并且返回前几个延迟较低的代理。 自己的实现： 编写了一个json解析类，解析出来，json文件的所有代理，并且以代理服务器对象的集合返回</description></item><item><title/><link>https://yesyouget.art/coder/codeDesin/java%E8%AE%BE%E8%AE%A1%E4%B8%80--%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/</link><pubDate>Sun, 27 Dec 2020 18:10:15 +0800</pubDate><guid>https://yesyouget.art/coder/codeDesin/java%E8%AE%BE%E8%AE%A1%E4%B8%80--%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/</guid><description>1.子父代码执行流程 public class Son extends Father { private String name = &amp;#34;Son属性&amp;#34;; { System.out.println(&amp;#34;Son，代码块&amp;#34;); } static { System.out.println(&amp;#34;Son，静态 代码块&amp;#34;); } public Son() { System.out.println(&amp;#34;Son 构造器 执行开始&amp;#34;); System.out.print(&amp;#34;Son-&amp;gt;childOveriddeBaseMethod---&amp;gt;&amp;#34;); childOveriddeBaseMethod(); System.out.print(&amp;#34;Son-&amp;gt;this.childOveriddeBaseMethod---&amp;gt;&amp;#34;); this.childOveriddeBaseMethod(); System.out.print(&amp;#34;Son-&amp;gt;super.childOveriddeBaseMethod---&amp;gt;&amp;#34;); super.childOveriddeBaseMethod(); System.out.print(&amp;#34;Son-&amp;gt;childCommonMethod()---&amp;gt;&amp;#34;); childCommonMethod(); System.out.println(&amp;#34;Son 构造器 执行结束&amp;#34;); } @Override public void childOveriddeBaseMethod() { System.out.println(&amp;#34;Son-&amp;gt;childOveriddeBaseMethod() ---&amp;gt;&amp;#34;</description></item><item><title/><link>https://yesyouget.art/coder/codeDesin/java%E8%AE%BE%E8%AE%A1%E4%BA%8C--%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link><pubDate>Sun, 27 Dec 2020 17:45:02 +0800</pubDate><guid>https://yesyouget.art/coder/codeDesin/java%E8%AE%BE%E8%AE%A1%E4%BA%8C--%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid><description>生产好对象，从类设计开始 java是面向对象语言。对象是运行过程中类的实例。理解类实例化的运行。同时理解一个类的结构，以及如何设计类内的代码。生产出来一个好对象。 一个java类，包含的基本结构，构造器、方法、属性。那么了解每基本位置，应该怎么写，就基本上能够编写一个优雅的类。同时，这几个基本结构，也是普通程序员可能都存在问题的地方。无意</description></item><item><title/><link>https://yesyouget.art/coder/thinking/%E7%BC%96%E8%BE%91%E5%99%A8%E9%85%8D%E8%89%B2%E7%9A%84%E7%90%86%E8%A7%A3/</link><pubDate>Thu, 24 Dec 2020 20:47:17 +0800</pubDate><guid>https://yesyouget.art/coder/thinking/%E7%BC%96%E8%BE%91%E5%99%A8%E9%85%8D%E8%89%B2%E7%9A%84%E7%90%86%E8%A7%A3/</guid><description>配色，if，while，逻辑控制，要清晰。静态方法调用，对象方法调用要区分。方法入参和方法变量要区分 这些相互间也要区分 好的配色，确实有助于代码理解。而不仅仅是花里胡哨</description></item><item><title/><link>https://yesyouget.art/coder/thinking/%E7%90%86%E8%A7%A3%E5%8F%8D%E5%B0%84/</link><pubDate>Sat, 19 Dec 2020 13:33:14 +0800</pubDate><guid>https://yesyouget.art/coder/thinking/%E7%90%86%E8%A7%A3%E5%8F%8D%E5%B0%84/</guid><description>什么叫java反射。印象最开始的一次是数据库加载驱动。 老师流利说出来，利用了java的反射机制来加载。但，并未对此过多解释。 从此，java反射如同迷雾一般萦绕弥漫眼前。 现在，也就是今天，我感觉我理解了！ 当我在思索一个python的执行过程时候，我意外的获得了启发。 在一个逻辑场景中，我需要获取一个普通变量的名字。来进行一些逻辑判断 在常规</description></item><item><title/><link>https://yesyouget.art/coder/thinking/%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81%E7%9A%84%E7%90%86%E8%A7%A3/</link><pubDate>Fri, 18 Dec 2020 09:07:14 +0800</pubDate><guid>https://yesyouget.art/coder/thinking/%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81%E7%9A%84%E7%90%86%E8%A7%A3/</guid><description>阅读源码的必要条件 阅读源码，我觉得，最重要的是，第一，面向对象的思想很重要，第二，设计模式，第三，类的初始化，第四找到启动入口，不断的断点调试。 所谓的面向对象思想。就是1.理解构造器是啥，构造器里面应该干啥，不应该干啥。2.理解那些方法应该定义为私有，那些应该是公开，哪些应该是静态方法。3.模块应该怎么拆分。 再说设计模式，设计模式本质</description></item></channel></rss>